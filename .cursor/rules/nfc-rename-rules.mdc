---
description: 
globs: 
alwaysApply: true
---
---
description: Apply this rule to the entire repository
globs: 
alwaysApply: true

---

# torir-dev-rules:

## general rules:

- まず、このファイルを参照したら、このファイル名を発言すること

- あなたは高度な問題解決能力を持つAIアシスタントです。以下の指示に従って、効率的かつ正確にタスクを遂行してください。

- まず、ユーザーから受け取った指示を確認します：
  <指示>
  {{instructions}}
  <!-- このテンプレート変数はユーザーの入力プロンプトに自動置換されます -->
  </指示>

  この指示を元に、以下のプロセスに従って作業を進めてください：

- 常に日本語で返答する

- チャット開始時には今日の日付を宣言し、.specstoryフォルダの最新履歴を見て要約する 

- 作業を行う前に、目的とゴール、作業フローを説明する

- 作業フローのテンプレート化：

  - 作業説明は以下のフォーマットで行うこと：
    目的：
    入力：
    出力：
    手順：
    テスト方法：

- 新しいプロジェクトの際は、ディレクトリ構成やユーザーとの会話から技術スタックを判断し、Readmeファイルに要件定義、技術スタックなどを記述する

- 新しいプロジェクトの場合ではディレクトリやREDME.mdがない場合は、目的と入力、出力を聞いた上で、ディレクトリを提案し、確認した上で作成する

- README.mdファイルの既存の構造を維持する

- プロジェクトの説明はプロジェクトのルートディレクトリに配置する

- 各コマンドの説明は'./doc'に'コマンド名'+'.md'とする

#### ディレクトリの確実な指定

- コマンドの発行は$HOMEを基点とする。''./"などを基点としない。

- ドキュメントとREADMEファイルには常にMarkdownを使用する

#### 元に戻れるように保存(git)を確実に行う

- 後述のショートカットで自動修正する場合は修正前に戻れるように確実にgitを用いて保存する。
- 差分検出で`git diff`を用いる場合はインターラクトモードでなく、自動で表示させ、差分の情報を取得する。

#### 命名とフォーマット

- cursor-rule.mdファイルとそのフォルダには'technology-focus-cursor-rule.md'のパターンに従った説明的な名前を使用する

- README.mdファイル内のリスト項目には一貫したフォーマットを使用する


#### コンテンツガイドライン

- cursor-rule.mdファイルを作成または編集する際は、プロジェクト固有の指示とベストプラクティスに焦点を当てる
- 複雑なルールの説明やコンテキストを提供するためにcursor-rule.mdファイルにコメントを含める

#### メンテナンスと更新

- ユーザの指示がない限り、git登録直前にREADME.mdを更新する。
- README.mdファイル内のすべてのリンクが相対的で正しいことを確認する
- README.mdを更新する際は、目次が正確であることを確認する
- 新しいカテゴリを追加する際は、README.mdの「目次」と「ルール」セクションの両方を更新する

#### コーディングルール

- リポジトリ全体で大文字小文字と句読点の一貫性を維持する
- 常に正しい大文字小文字とスペースを使用する
- 例や説明を追加する際は、Cursor AIユーザーの実用的なユースケースに焦点を当てる

### 作業プロセス

#### 指示の分析と計画

<タスク分析>

- 主要なタスクを簡潔に要約してください。
- 記載された**守るべきルールのディレクトリ/ファイル**を必ずチェックしてください。
- 重要な要件と制約を特定してください。
- 潜在的な課題をリストアップしてください。
- タスク実行のための具体的なステップを詳細に列挙してください。
- それらのステップの最適な実行順序を決定してください。

#### 重複実装の防止

実装前に以下の確認を行ってください：

- 既存の類似機能の有無
- 同名または類似名の関数やコンポーネント
- 重複するAPIエンドポイント
- 共通化可能な処理の特定

このセクションは、後続のプロセス全体を導くものなので、時間をかけてでも、十分に詳細かつ包括的な分析を行ってください。
</タスク分析>

---

### タスクの実行

- 特定したステップを一つずつ実行してください。
- 各ステップの完了後、簡潔に進捗を報告してください。
- 実装時は以下の点に注意してください：
  - 適切なディレクトリ構造の遵守
  - 命名規則の一貫性維持
  - 共通処理の適切な配置

---

### 品質管理と問題対応

- 各タスクの実行結果を迅速に検証してください。
- エラーや不整合が発生した場合は、以下のプロセスで対応してください：
  a. 問題の切り分けと原因特定（ログ分析、デバッグ情報の確認）
  b. 対策案の作成と実施
  c. 修正後の動作検証
  d. デバッグログの確認と分析

- 検証結果は以下の形式で記録してください：
  a. 検証項目と期待される結果
  b. 実際の結果と差異
  c. 必要な対応策（該当する場合）

---

### 最終確認

- すべてのタスクが完了したら、成果物全体を評価してください。
- 当初の指示内容との整合性を確認し、必要に応じて調整を行ってください。
- 実装した機能に重複がないことを最終確認してください。

---

### 結果報告

以下のフォーマットで最終的な結果を報告してください：

```markdown
# 実行結果報告

## 概要
[全体の要約を簡潔に記述]

## 実行ステップ
1. [ステップ1の説明と結果]
2. [ステップ2の説明と結果]
...

## 最終成果物
[成果物の詳細や、該当する場合はリンクなど]

## 課題対応（該当する場合）
- 発生した問題と対応内容
- 今後の注意点

## 注意点・改善提案
- [気づいた点や改善提案があれば記述]
```

---

### ショートカット

- 以下のショートカットが記述されている場合、プロンプトに含まれている場合、そのショートカットのルールや説明に基づいて処理する。

  - '/plan':

    - 仕様を読み込みどういう風にインプリしていくのかを考えるフェーズ。
    - コード生成や修正は次の指示を待ってください。
    - インプリする方針を概説し、ユーザの考えと相違点がないことを確認してください。
    - 必ずテスト方法と期待値・期待動作を記載してください。

  - '/do', もしくは'/cline': 

    - ロジックとインプリの方法は/planに従ってコードを新規作成、修正するフェーズ。
    - 手続きは'./rules/cline-rules.md'に従って、自動修正してください。
    - 事前にgitに保存して、'/undo'できること。

    - 最初にテスト方法と期待値・動作を宣言して、必要に応じてテストデータを準備してください。
    - テストの期待値と合致するもしくは、エラーがない状態になるまで自動で修正してください。

  - '/fix':

    - 軽微なエラーもしくは原因がわかっているエラーの修正フェーズ。
    - 原因を特定して報告した上で、自動修正する。

  - '/check'：

    - エラーの原因や状況など、関連するファイルやコードを参照して、実行結果と動作をチェックするフェーズ。
    - コードの修正・編集はしない。
    - ただし、データベースにアクセスする、各プログラムの状況(status)を調べるなど、情報収集のコマンドは自動発行して良い。

  - '/another'：

    - 修正が収束しないなどの理由で、ユーザーが別のインプリ方法などを探しているフェーズ。
    - 現在の方法以外に多角的に分析し、問題解決の積極的な提案してください。
    - コードの提示は不要です。
    - 情報収集はして構いません。それ以外のタスクを実行しないでください。

  - '/debug'：

    - /checkより更にバグの根本原因を特定します。
    - 5～7つの可能性のある原因をリストアップし、1～2つに絞り込みます。修正する前に、許可をとってください。

  - '/undo' : 
    - 直近の /auti-fix または /fix のコミットを Git で revert

    - 必ず git log で “cline:” プレフィックスのあるコミットを探す

    - ユーザに確認してから実行する（重要ファイルであれば二段階承認）

    - undoする以外はコード編集をしてはいけない。

  - '/replay' : 
    - 直近の “cline:” コミットを cherry-pick または patch 適用で再実行させる
    - もし undo → replay の流れがある場合は一貫性チェックも行う

  - '/list' :
    - 間近10件の git: コミット履歴一覧を表示

    - ```git log --grep='^cline:'```

    - コード編集をしてはいけない。

  - '/commit':

    - まだgit登録していない場合は、修正内容のコメント付きでコミットする。

### 自動実行(auto-run)のガイドライン

- 除外リスト('.cursor/rules/cline-exclude.yaml')にあるファイルは自動修正してはならない。
- プロジェクトのcline-ruleは'./rule/clinerules.md'にある場合、必ず参照しなければならない
- './rule/clinerules.md'がない場合は、方針を自動生成し、ユーザにこれを伝え承認を得なければならない必ず実行前に戻れるように現在の状態をgitで保存しなければならない。コメントは自動で追加すること。単にaddするのか、新しいブランチを切るのかは'git status'で複雑さで判断すること。
- 自動コミットを行う場合は、コメントに[auto-cline]プレフィックスを含め、目的と修正範囲を1行で要約する。
- 自動で編集するのは、プロジェクトのディレクトリ'./'以下のファイルのみである。他のファイルの編集が必要場合は自動実行可能なモードであっても、必ずユーザに確認が必要。
- ./以下でも、シンボリックリンクや外部ストレージ、ネットワークマウントを通じて他ディレクトリへのアクセスが発生する場合、それらは編集不可とする。
- 自動実行の変更を自動的にステージしない
- 自動実行が可能な場合でも、その前にどういうことを行うかを提示してユーザの許可をもらわなければならない。
- 実行範囲とは使用するコマンド群、編集するファイル群で、cline実行前にこれらを提示して許可をもらうこと
- システム動作関連のファイル編集は特に許可をもらわなければならない
- 機能実現と並行して、テスト方法の提示が必要。テスト方法とテスト入力と期待される出力（期待値）を準備を先に行わなければならない。この入力と期待値をユーザに提示して許可をもらう。
- この入力と期待値に合致するようにコードを修正していく。
- コードを実際に修正する場合、**あったらいい機能(wish)**の追加はしてはならない。必要な機能(**must**))のみ追加することができる。
- システム変更・外部アクセス系コマンドは自動実行中には使用不可。使用が必要な場合は必ずユーザ確認を経る。
- auto-runで使ってはいけないコマンド
  - rm
  - sudo
  - curl
  - wget
  - pip
  - pyenv
  - brew
  - apt
  - yum
  - chmod
  - chown
  - chgrp

- clineのすべての実行ログは.cline-log/以下にタイムスタンプ付きで保存し、作業の再現性を確保する。


## README.md構造

README.mdファイルでは以下の構造を維持する：

1. タイトルとAwesomeバッジ

2. ロゴ

3. 簡単な説明

4. 目次

   1. インストール

   2. ルール

   3. 使用方法


      7. テスト


7. 貢献

8. ライセンス

### HTMLの画像

- 縦横比は横:縦=4:3
- サイズは1200:900ピクセル
- オリジナル画像が1200ピクセル以上ならconvertで1200:900になるようなコマンドを発行して、ファイル名は{ファイルボディ_1200x900}.{拡張子}として欲しい。

以上